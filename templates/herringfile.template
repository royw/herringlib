"""
{description}

Add the following to your *requirements.txt* file:

* argparse if sys.version_info < (3, 2)

"""
import os
import re

# noinspection PyUnresolvedReferences
from herring.herring_app import task, namespace, HerringFile, task_execute
from herring.support.simple_logger import info

# noinspection PyUnresolvedReferences
from herringlib.project_settings import Project

# Define our project environment.  Used by generic tasks in herringlib/

herringfile_dir = os.path.dirname(__file__)
Project.herringfile_dir = herringfile_dir

Project.metadata(
    {{
        'name': '{name}',
        'package': '{package}',
        'author': '{author}',
        'author_email': '{author_email}',
        'description': '{description}',

        # if you want to include a design section in the documentation, you can either
        # add the design info as a string to 'design_header', or create an RST file
        # and add the path to the file to 'design_header_file'.
        # Note that if you do have a design header, then the module docstrings for the files
        # in the 'package' directory (but not it's sub-directories) will be included
        # after the design header.

        'design_header': '',
        'design_header_file': None,

        # python versions for virtual environments.  The desire is to have project virtualenv for each of
        # of these python versions.
        'python_versions': ('34', '33', '27', '26'),

        # python version (defined in 'python_versions') to build documentation with
        'doc_python_version': '27',

        # python versions (defined in 'python_versions') to unit test with.  Defaults to 'wheel_python_versions'.
        'test_python_versions': ('27', '34'),

        # python version (defined in 'python_versions') to build source distribution with
        'sdist_python_version': '27',

        # python versions (defined in 'python_versions') to build wheels for
        'wheel_python_versions': ('34', '33', '27', '26'),
    }}
)

Project.required_files()


@task(depends=['build', 'doc', 'test'])
def default():
    """ The default task(s) to run when none are specified """
    pass
